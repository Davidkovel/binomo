import React, { createContext, useState, useEffect } from "react";
import { CONFIG_API_BASE_URL } from '../components/config/constants'

const API_BASE_URL = CONFIG_API_BASE_URL;

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [userBalance, setUserBalance] = useState(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ sessionStorage
    const saved = sessionStorage.getItem("balance");
    return saved ? parseFloat(saved) : 0;
  });
  
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (token) {
      setIsAuthenticated(true);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ sessionStorage
  const updateBalance = (newBalance) => {
    const balance = typeof newBalance === 'function' ? newBalance(userBalance) : newBalance;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    setUserBalance(balance);
    sessionStorage.setItem("balance", balance.toString());
    console.log('üí∞ Context: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', balance.toFixed(2));
  };

  /*const updateBalance = async (newBalance) => {
    const balance =
      typeof newBalance === "function" ? newBalance(userBalance) : newBalance;

    const amount_change = balance - userBalance; // –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    // üîπ 1. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    setUserBalance(balance);
    sessionStorage.setItem("balance", balance.toString());
    console.log("üí∞ Context: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:", balance);

    // üîπ 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ backend
    try {
      const token = localStorage.getItem("access_token");
      const response = await fetch(`${API_BASE_URL}/api/user/update_balance`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          amount_change: amount_change,
        }),
      });

      if (response.ok) {
        console.log("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ backend");
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ backend");
      }
    } catch (error) {
      console.error("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };*/

  return (
    <UserContext.Provider 
      value={{ 
        userBalance, 
        setUserBalance, // üîπ –û—Å—Ç–∞–≤–ª—è–µ–º setUserBalance –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        updateBalance,  // üîπ –î–æ–±–∞–≤–ª—è–µ–º updateBalance –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        isAuthenticated, 
        setIsAuthenticated
      }}
    >
      {children}
    </UserContext.Provider>
  );
};